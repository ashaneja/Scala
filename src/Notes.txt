1. every value is an object.

2. Classes are extended by subclassing and a flexible mixin-based composition mechanism as a clean replacement for multiple inheritance.

3. Anonymous Functions

4. Higher Order Functions.

5.  Currying - is a function that expects parameters but if those are missed -
    returns another function where (rest of) those params are expected to be passed to the new function afterwards.
Case Classes
Pattern Matching
Everything is an Object. Including primitives from Java and functions.

scala.Any is the root of the type hierarchy.
scala.AnyVal corresponds to the Primitives
scala.AnyRef corresponds to the user-defined classes. All user defined classes implicity extend the trait ScalaObject.

Traits for extending behavior

Mixin type inheritance

Anonymous Function

Higher order functions.

Nested functions.

Case classes:: Scala supports the notion of case classes. Case classes are regular classes which export their constructor parameters and which provide a recursive decomposition mechanism via pattern matching.



